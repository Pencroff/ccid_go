//go:build !pkgsite
// +build !pkgsite

package ccid_go

import (
	p "github.com/Pencroff/ccid_go/pkg"
	"time"
)

// Unexported
type ccIdGenTestCase struct {
	name        string
	size        byte
	mockTime    time.Time
	fingerprint []byte
	nextA       []byte
	nextB       []byte
}

// Test cases for CCId generator
// - sizes: 64, 96, 128, 160
// - fingerprint: min avg max
// - 50% monotonic strategy
// - mock rnd gen: 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, etc.
// - cases: monotonic and non-monotonic 2 examples (next A and next B)
// non-monotonic increase by 1 second

var testCaseCcIdGenMap = map[string]ccIdGenTestCase{
	"64 bit no fingerprint": {
		size:     p.ByteSliceSize64,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xA5, 0xA6, 0xA7, 0xA8},
		nextB:    []byte{0x12, 0x34, 0x56, 0x79, 0xA9, 0xAA, 0xAB, 0xAC},
	},
	"64 bit fingerprint": {
		size:        p.ByteSliceSize64,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xA5, 0xA6, 0xA7},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xA8, 0xA9, 0xAA},
	},
	"96 bit no fingerprint": {
		size:     p.ByteSliceSize96,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC},
		nextB:    []byte{0x12, 0x34, 0x56, 0x79, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4},
	},
	"96 bit min fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2},
	},
	"96 bit avg fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x66, 0x77, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE},
	},
	"96 bit max fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xA5, 0xA6, 0xA7},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xA8, 0xA9, 0xAA},
	},
	"128 bit no fingerprint": {
		size:     p.ByteSliceSize128,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0},
		nextB:    []byte{0x12, 0x34, 0x56, 0x79, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC},
	},
	"128 bit min fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA},
	},
	"128 bit avg fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x66, 0x77, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6},
	},
	"128 bit max fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2},
	},
	"160 bit no fingerprint": {
		size:     p.ByteSliceSize160,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4},
		nextB:    []byte{0x12, 0x34, 0x56, 0x79, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4},
	},
	"160 bit min fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2},
	},
	"160 bit avg fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x66, 0x77, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE},
	},
	"160 bit max fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF},
		nextB:       []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA},
	},
}

var testCaseMonotonicCcIdGenMap = map[string]ccIdGenTestCase{
	"64 bit no fingerprint": {
		size:     p.ByteSliceSize64,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xA5, 0xA5, 0xA5, 0xA5},
		// + 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0xA5, 0xA6, 0x4B, 0x4A},
	},
	"64 bit fingerprint": {
		size:        p.ByteSliceSize64,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xA5, 0xA5, 0xA5},
		// + 0x05, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xA5, 0xAB, 0x4A},
	},
	"96 bit no fingerprint": {
		size:     p.ByteSliceSize96,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0xa5, 0xa5, 0xa5, 0xa6, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"96 bit min fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4a},
	},
	"96 bit avg fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xa5, 0xa5, 0xab, 0x4b, 0x4a},
	},
	"96 bit max fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xa5, 0xab, 0x4a},
	},
	"128 bit no fingerprint": {
		size:     p.ByteSliceSize128,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa6, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"128 bit min fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"128 bit avg fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xa5, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"128 bit max fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4a},
	},
	"160 bit no fingerprint": {
		size:     p.ByteSliceSize160,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa6, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"160 bit min fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"160 bit avg fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a},
	},
	"160 bit max fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5},
		// + 0x05, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5
		nextB: []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xab, 0x4b, 0x4b, 0x4b, 0x4b, 0x4a},
	},
}

var testCaseMonotonicOverloadCcIdGenMap = map[string]ccIdGenTestCase{
	"64 bit no fingerprint": {
		size:     p.ByteSliceSize64,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff},
		// + 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0xff, 0xff, 0xff, 0xff},
	},
	"64 bit fingerprint": {
		size:        p.ByteSliceSize64,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xff, 0xff, 0xff},
	},
	"96 bit no fingerprint": {
		size:     p.ByteSliceSize96,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"96 bit min fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"96 bit avg fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x66, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"96 bit max fingerprint": {
		size:        p.ByteSliceSize96,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xff, 0xff, 0xff},
	},
	"128 bit no fingerprint": {
		size:     p.ByteSliceSize128,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"128 bit min fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"128 bit avg fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x66, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"128 bit max fingerprint": {
		size:        p.ByteSliceSize128,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"160 bit no fingerprint": {
		size:     p.ByteSliceSize160,
		mockTime: time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		nextA:    []byte{0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"160 bit min fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"160 bit avg fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x66, 0x77},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x66, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x66, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
	"160 bit max fingerprint": {
		size:        p.ByteSliceSize160,
		mockTime:    time.Date(2024, 1, 16, 15, 44, 56, 0, time.UTC),
		fingerprint: []byte{0x55, 0x77, 0x99, 0xBB, 0xDD},
		nextA:       []byte{0x12, 0x34, 0x56, 0x78, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		// + 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff
		nextB: []byte{0x12, 0x34, 0x56, 0x79, 0x55, 0x77, 0x99, 0xBB, 0xDD, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
	},
}
